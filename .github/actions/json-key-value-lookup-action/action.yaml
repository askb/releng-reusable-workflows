---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2024 The Linux Foundation

name: "üîë JSON Variable Key/Value Lookup"

inputs:
  JSON:
    description: "The JSON key/value lookup table"
    type: string
    required: true
  KEY:
    description: "The JSON key requiring lookup"
    type: string
    required: true
  DEFAULT:
    # Can be used to prevent exit/error if lookup fails
    description: "Default value to return if lookup fails"
    type: string
    required: false
  SUMMARY_OUTPUT:
    description: "Displays summary output"
    type: boolean
    required: false
    default: "false"
  SILENT:
    # Present for security, in case the content that might be sensitive
    description: "Suppress output of returned values"
    type: boolean
    required: false
    default: "false"

outputs:
  VALUE:
    description: "The value associated with the supplied key"
    value: ${{ steps.lookup.outputs.value }}

runs:
  using: "composite"
  steps:
    - name: "JSON Variable Key/Value Lookup"
      id: lookup
      shell: bash
      # yamllint disable rule:line-length
      run: |
        # JSON Variable Key/Value Lookup


        KEY="${{ inputs.key }}"
        DEFAULT="${{ inputs.default }}"
        SUMMARY_OUTPUT=$(echo ${{ inputs.SUMMARY_OUTPUT }} | tr '[:upper:]' '[:lower:]')
        SILENT=$(echo ${{ inputs.SILENT }} | tr '[:upper:]' '[:lower:]')

        # Validate that input variables are populated
        if [ -z "${{ inputs.json }}" ]; then
          echo "Error: variable/JSON string was NOT passed as input ‚ùå"
          exit 1
        elif [ -z "$KEY" ]; then
          echo "Error: required lookup key was NOT passed as input ‚ùå"
          exit 1
        fi

        # Ensure JSON parser/binary is available
        JQ=$(which jq || true)
        if [ ! -x "$JQ" ]; then
          echo "Error: jq command was NOT found in the PATH ‚ùå"; exit 1
        fi

        # Check that string parses as valid JSON
        if (jq -re '""' <<< '${{ inputs.json }}' 2>&1); then
          echo "JSON parsing successful ‚úÖ"
        else
          echo "Error: jq command was NOT able to parse JSON ‚ùå"; exit 1
        fi

        echo "Key to lookup: $KEY üîë"

        VALUE=$(echo '${{ inputs.JSON }}' | \
          jq -r --arg KEY "$KEY" '.[] | select(.key==$KEY) | .value')
        if [ -z "$VALUE" ] && [ -z "$DEFAULT" ]; then
          # If no default return value provided, throw a fatal error
          echo "Key/value lookup failed ‚ùå"; exit 1
        elif [ -z "$VALUE" ]; then
          echo "Key/value lookup failed ‚ö†Ô∏è"
          VALUE="$DEFAULT"
        fi

        echo "value=$VALUE" >> "$GITHUB_ENV"
        echo "value=$VALUE" >> "$GITHUB_OUTPUT"

        if [ "$SILENT" != "true" ]; then
          echo "Value returned: $VALUE üí¨" >> "$GITHUB_STEP_SUMMARY"
        fi

        if [ "$SUMMARY_OUTPUT" = "true" ]; then
          echo "### üîë JSON Variable Key/Value Lookup" >> "$GITHUB_STEP_SUMMARY"
          echo "Key to lookup: $KEY üîë" >> "$GITHUB_STEP_SUMMARY"
          if [ "$SILENT" != "true" ]; then
            echo "Value returned: $VALUE üí¨" >> "$GITHUB_STEP_SUMMARY"
          fi
        fi
